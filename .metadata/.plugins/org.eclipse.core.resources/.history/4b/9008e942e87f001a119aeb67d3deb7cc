package com.curso.cursomc.resources;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

<<<<<<< HEAD
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
=======
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
>>>>>>> 8167cc0aee9ccaac602b8084d6ee2853175fe535
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.curso.cursomc.domain.Categoria;
<<<<<<< HEAD
import com.curso.cursomc.dto.CategoriaDto;
import com.curso.cursomc.services.CategoriaService;

import javassist.tools.rmi.ObjectNotFoundException;
=======
import com.curso.cursomc.services.CategoriaService;
>>>>>>> 8167cc0aee9ccaac602b8084d6ee2853175fe535

@RestController
@RequestMapping(value="/categorias")
public class CategoriaResource {
	@Autowired
	private CategoriaService service;
<<<<<<< HEAD
	
	
	@RequestMapping(value= "/{id}", method = RequestMethod.GET)
	public ResponseEntity <Categoria> find(@PathVariable Integer id)  {
		
		
			Categoria obj = service.buscar(id);
			List<Categoria> lista = new ArrayList<Categoria>();
			lista.add(obj);
			return ResponseEntity.ok().body(obj);
=======
	@RequestMapping(value= "/{id}", method = RequestMethod.GET)
	public ResponseEntity <?> find(@PathVariable Integer id) {
		
		Categoria obj = service.buscar(id);
		List<Categoria> lista = new ArrayList<Categoria>();
		lista.add(obj);
		return ResponseEntity.ok().body(obj);
>>>>>>> 8167cc0aee9ccaac602b8084d6ee2853175fe535
	}
	
	@RequestMapping(method=RequestMethod.POST)
	public ResponseEntity<Void> insert(@Valid @RequestBody CategoriaDto objDto){
			Categoria obj = service.fromDTO(objDto);
			obj = service.insert(obj);
			URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
					.buildAndExpand(obj.getId()).toUri();
			return ResponseEntity.created(uri).build();
	}
	
	@RequestMapping(value= "/{id}", method=RequestMethod.PUT)
	public ResponseEntity<Void> update(@Valid @RequestBody CategoriaDto objDto, @PathVariable Integer id){
		Categoria obj = service.fromDTO(objDto);
		obj.setId(id);
		obj = service.update(obj);
		return ResponseEntity.noContent().build();
	}
	
	@RequestMapping(value= "/{id}", method=RequestMethod.DELETE)
	public ResponseEntity<Void> delete(@PathVariable Integer id){
			service.delete(id);
			return ResponseEntity.noContent().build();
	}
	
	@RequestMapping(method = RequestMethod.GET)
	public ResponseEntity <List<CategoriaDto>> findAll()  {
			List<Categoria> list = service.findAll();
			List<CategoriaDto> listDto = list.stream().map(obj -> new CategoriaDto(obj)).collect(Collectors.toList());
			
			return ResponseEntity.ok().body(listDto);
	}
	
	@RequestMapping(value="/page", method = RequestMethod.GET)
	public ResponseEntity <Page<CategoriaDto>> findPage(
			@RequestParam(value="page", defaultValue="0") Integer page,
			@RequestParam(value="linesPerPage", defaultValue="24") Integer linesPerPage, 
			@RequestParam(value="orderBy", defaultValue="nome") String orderBy,
			@RequestParam(value="direction", defaultValue="ASC") String direction)  {
		
			Page<Categoria> list = service.findPage(page, linesPerPage, orderBy, direction);
			Page<CategoriaDto> listDto = list.map(obj -> new CategoriaDto(obj));
			
			return ResponseEntity.ok().body(listDto);
	}
}
