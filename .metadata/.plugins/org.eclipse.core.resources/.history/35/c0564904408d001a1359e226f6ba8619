package com.curso.cursomc.services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.curso.cursomc.domain.Cidade;
import com.curso.cursomc.domain.Cliente;
import com.curso.cursomc.domain.Endereco;
import com.curso.cursomc.domain.Fornecedor;
import com.curso.cursomc.dto.ClienteDto;
import com.curso.cursomc.dto.ClienteNewDto;
import com.curso.cursomc.repositories.CidadeRepository;
import com.curso.cursomc.repositories.FornecedorRepository;
import com.curso.cursomc.services.exceptions.DataIntegrityException;
import com.curso.cursomc.services.exceptions.ObjectNotFoundException;



@Service
public class FornecedorService {
	@Autowired
	private FornecedorRepository repo;
	
	@Autowired 
	private CidadeRepository cidadeRepository;
	
	@Autowired
	private BCryptPasswordEncoder pe;

	public Fornecedor buscar(Integer id) throws ObjectNotFoundException {
		Optional<Fornecedor> obj = repo.findById(id);
		return obj.orElseThrow(() -> new ObjectNotFoundException("Objeto não encontrado! ID: " + id + " tipo: " + Cliente.class.getName()));
		
		
	}

	public Fornecedor update(Fornecedor obj) {
		Fornecedor newobj = buscar(obj.getId());
		updateData(newobj,obj);
		return repo.save(obj);
	}
	private void updateData(Fornecedor newobj,Fornecedor obj) {
		newobj.setNome(obj.getNome());
		newobj.setEmail(obj.getEmail());
	}
	public void delete(Integer id) {
		buscar(id);
		try {
			repo.deleteById(id);
		}catch(DataIntegrityViolationException e) {
			throw new DataIntegrityException("Não é possível excluir um Cliente que possui produtos");
			
		}
	}

	public List<Fornecedor> findAll() {
		return repo.findAll();
	}
	
	public Page<Fornecedor> findPage(Integer page,Integer linesPerPage, String orderBy,String direction){
		
		PageRequest pageRequest = PageRequest.of(page, linesPerPage,Direction.valueOf(direction),orderBy);
		return repo.findAll(pageRequest);
	}
	
	
	

	public Fornecedor insert(Fornecedor obj) {
		obj.setId(null);
		return repo.save(obj);
	}
}
